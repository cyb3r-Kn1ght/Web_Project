# ==================================================
# Path: G:\PC\Coding\Github\Web_Projectv3\Web_Project
# Detected tech: javascript, python, react, typescript
# ==================================================

## DIRECTORY STRUCTURE
```
Web_Project/
├── .git/
├── .vscode/
├── backend/
│   ├── node_modules/
│   ├── src/
│   │   ├── controllers/
│   │   │   ├── auth.controller.js
│   │   │   └── message.controller.js
│   │   ├── lib/
│   │   ├── middleware/
│   │   │   └── auth.middleware.js
│   │   ├── models/
│   │   │   ├── celebs.model.js
│   │   │   ├── chat.model.js
│   │   │   ├── token.model.js
│   │   │   └── users.model.js
│   │   ├── routes/
│   │   │   ├── auth.route.js
│   │   │   ├── message.route.js
│   │   │   ├── tts.route.js
│   │   │   └── vnpay.route.js
│   │   └── main.js
│   ├── .env
│   ├── package-lock.json
│   └── package.json
├── frontend/
│   ├── node_modules/
│   ├── public/
│   │   ├── favicon.ico
│   │   └── vite.svg
│   ├── src/
│   │   ├── assets/
│   │   │   ├── chat/
│   │   │   │   ├── barack-obama.jpg
│   │   │   │   ├── default-avatar.png
│   │   │   │   ├── donald-trump.jpg
│   │   │   │   └── elon-musk.jpg
│   │   │   ├── interview/
│   │   │   │   ├── AI_fine_tune.png
│   │   │   │   ├── SS_model_Ollama.png
│   │   │   │   ├── guide.png
│   │   │   │   ├── page_speed_rating_mobile.jpg
│   │   │   │   └── page_speed_rating_pc.jpg
│   │   │   ├── login/
│   │   │   │   ├── facebook.svg
│   │   │   │   └── google.svg
│   │   │   └── web_page/
│   │   │       └── chongxoa.txt
│   │   ├── components/
│   │   │   ├── chat/
│   │   │   │   ├── alertdemo.jsx
│   │   │   │   ├── bodysidebar.jsx
│   │   │   │   ├── celebs.jsx
│   │   │   │   ├── chatbox.jsx
│   │   │   │   ├── footersidebar.jsx
│   │   │   │   ├── headerchatbox.jsx
│   │   │   │   ├── headersidebar.jsx
│   │   │   │   ├── historychatbox.jsx
│   │   │   │   ├── sidebar.jsx
│   │   │   │   └── typechatbox.jsx
│   │   │   ├── login/
│   │   │   │   ├── Form4all.jsx
│   │   │   │   └── Input_Fields.jsx
│   │   │   └── web_page/
│   │   │       ├── container-button.jsx
│   │   │       ├── footer.jsx
│   │   │       ├── navbar.jsx
│   │   │       └── tittle.jsx
│   │   ├── context/
│   │   │   └── CuThamKhao/
│   │   │       ├── SelectedAvatarContext.js
│   │   │       ├── SelectedCelebContext.js
│   │   │       └── UsernameContext.js
│   │   ├── feature/
│   │   │   └── login/
│   │   │       └── login.js
│   │   ├── lib/
│   │   ├── page/
│   │   │   ├── chat/
│   │   │   │   ├── chat.jsx
│   │   │   │   └── filechatcuthamkhao.jsx
│   │   │   ├── interview/
│   │   │   │   └── interview.jsx
│   │   │   ├── login/
│   │   │   │   ├── ForgotPasswordPage.jsx
│   │   │   │   ├── OAuthSuccess.jsx
│   │   │   │   ├── ResetPasswordPage.jsx
│   │   │   │   ├── filelogincuthamkhao.jsx
│   │   │   │   └── login.jsx
│   │   │   ├── payment/
│   │   │   │   └── payment.jsx
│   │   │   └── web_page/
│   │   │       └── Home.jsx
│   │   ├── store/
│   │   │   ├── useAuthStore.js
│   │   │   └── useChatStore.js
│   │   ├── style/
│   │   │   ├── chat/
│   │   │   │   ├── chat.css
│   │   │   │   ├── chatbox.css
│   │   │   │   └── sidebar.css
│   │   │   ├── interview/
│   │   │   │   └── interview.css
│   │   │   ├── login/
│   │   │   │   └── login.css
│   │   │   ├── passwd/
│   │   │   │   ├── ForgotPasswordPage.css
│   │   │   │   └── ResetPasswordPage.css
│   │   │   ├── payment/
│   │   │   │   └── payment.css
│   │   │   └── web_page/
│   │   │       ├── ContainerButton.css
│   │   │       ├── Home_module.css
│   │   │       ├── footer.css
│   │   │       ├── navbar.css
│   │   │       └── tittle.css
│   │   ├── App.jsx
│   │   ├── Appthamkhao.jsx
│   │   ├── checkrestpass.jsx
│   │   ├── main.jsx
│   │   ├── reportWebVitals.js
│   │   └── setupTests.js
│   ├── .gitignore
│   ├── README.md
│   ├── eslint.config.js
│   ├── index.html
│   ├── package-lock.json
│   ├── package.json
│   ├── vercel.json
│   └── vite.config.js
├── .gitignore
├── README.md
├── package-lock.json
└── package.json
```

## FILE CONTENTS

### backend\src\main.js
```js
// const express = require('express');

// mặc định type đang sử dụng là node, nếu muốn sử dụng require()
// có thể đổi type thành commonjs trong package.json

import express from 'express';
//sử dụng server và expressjs app đã được tạo từ socket.js
import { server, app } from './lib/socket.js';

import authRoutes from './routes/auth.route.js';
import messageRoutes from './routes/message.route.js';
import vnpayHandler from './routes/vnpay.route.js';
import ttsRoute from './routes/tts.route.js';

import { ConnectDB } from './lib/db.js';
import cookieParser from 'cookie-parser';
import dotenv from 'dotenv';

dotenv.config();
import session from 'express-session';
import MongoStore from 'connect-mongo'; // lưu trữ session vào MongoDB
import passport from 'passport';
import './lib/passport.js'; // file này sẽ cấu hình Google & Facebook login
import cors from 'cors';

const port = process.env.PORT || 4000; //port mặc định phòng trường hợp không có biến PORT trong .env

// Tạo route cho TTS


const corsOptions = {
  origin: ['https://celebritychatbot.id.vn', 'https://web-project-flame-five.vercel.app'],
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With'],
  exposedHeaders: ['Content-Length', 'X-Powered-By']
};

app.use(cors(corsOptions));
app.options('*', cors(corsOptions));

app.use(express.json());
app.use(cookieParser());
app.use(session({
  secret: process.env.SESSION_SECRET,
  resave: false,
  saveUninitialized: false,
  store: MongoStore.create({
    mongoUrl: process.env.MONGO_URI,
    collectionName: 'sessions',
    ttl: 24 * 60 * 60 // Session TTL (1 day)
  }),
  cookie: {
    secure: process.env.NODE_ENV === 'production',
    sameSite: 'none', // Required for cross-domain cookies
    maxAge: 86400000
  }
}));

// Cấu hình session cho Passport
app.use(passport.initialize());
app.use(passport.session());

//debug
app.use((req, res, next) => {
  console.log('▶ Origin:', req.headers.origin);
  console.log('▶ Method:', req.method, '▶ URL:', req.originalUrl);
  next();
});


app.get('/api/health', (req, res) => {
  res.status(200).json({ 
    status: 'ok',
    timestamp: Date.now()
  });
});

//lệnh này sẽ xử lí khi người dùng muốn đăng nhập, đăng kí hay đăng xuất tại đường dẫn /api/auth
app.use("/api/auth", authRoutes); 

app.use("/api/chat", messageRoutes);

app.use("/api/vnpay", vnpayHandler);

app.use('/api/tts', ttsRoute);

app.use((err, req, res, next) => {
  console.error(err.stack);
  // Thêm headers CORS vào response lỗi
  res.header("Access-Control-Allow-Origin", "https://celebritychatbot.id.vn");
  res.header("Access-Control-Allow-Credentials", "true");
  res.status(err.status || 500).json({ error: err.message });
});

server.listen(port,"0.0.0.0", () => {
    console.log(`Example app listening at http://localhost:${port}/api/auth/signup`);
    ConnectDB(); // tiến hành kết nối database
}); // cần có phương thức listen() để phía server có thể nhận req từ client


```

### backend\src\controllers\auth.controller.js
```js
//nơi này định nghĩa hàm để xử lí tín hiệu đăng nhập, đăng xuất, đăng kí
import User from '../models/users.model.js'
import Token from '../models/token.model.js'
import bcrypt from 'bcryptjs' // mã hóa mật khẩu của người dùng vào trong csdl
import dotenv from 'dotenv';
import jwt from 'jsonwebtoken';
import crypto, { randomBytes } from 'crypto'; // random token reset mật khẩu
import nodemailer from 'nodemailer'; // thư viện gửi gmail
import passport from 'passport';
dotenv.config();

const JWT_SECRET = process.env.JWT_SECRET;

const getClientDomain = (req) => {
  const host = req.headers.host || '';
  return host.includes('celebritychatbot.id.vn') 
    ? 'https://celebritychatbot.id.vn' 
    : 'https://web-project-flame-five.vercel.app';
};

// xử lý quên mật khẩu
const sendEmail = async (email, reset_link) => {
    const transporter = nodemailer.createTransport({
        service: "gmail",
        auth: {
            user: process.env.EMAIL,
            pass: process.env.PASSWORD
        },
    });

    await transporter.sendMail({
        from: process.env.EMAIL,
        to: email,
        subject: "Reset Password",
        text: `Click on the link để reset mật khẩu: ${reset_link}`
    });
}

export const signup = async (req, res) => {
    console.log("Received request at signup:", req.body);

    const { username,email, password } = req.body;

    // kiểm tra xem người dùng đã nhập đủ thông tin chưa
    if (!username || !password || !email) {
        res.status(400).send("Missing required information");
        return;
    }

    // kiểm tra xem người dùng có trùng username không
    if (await User.findOne({ username })) {
        res.status(400).send("Username already exists");
        return;
    }

    // kiểm tra mật khẩu
    const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[\W_]).{8,}$/;
    if (!passwordRegex.test(password)){
        res.status(400).send("Password must be at least 8 characters long, contain a letter, a number and a special character");
        return;
    }

    // kiểm tra email
    const emailRegex = /.+\@.+\..+/;
    if (!emailRegex.test(email)){
        res.status(400).send("Invalid email address");
        return;
    }
    // kiểm tra xem email có trùng không
    if (await User.findOne({ email })) {
        res.status(400).send("Email already exists");
        return;
    }

    // mã hóa mật khẩu
    const hashedPassword = bcrypt.hashSync(password, 10);
    // tạo một user mới
    const newUser = new User({ username, password: hashedPassword, email });
    // lưu user mới vào trong csdl
    await newUser.save();
    res.send("User created successfully");
    res.redirect(`${getClientDomain(req)}/login`);
}

export const login = async (req, res) => {
    console.log("Received request at login:", req.body);

    const { email, password } = req.body;
    if (!email || !password) {
        res.status(400).send("Missing required information");
        return;
    }
    
    // kiểm tra xem người dùng có tồn tại không
    const user = await User.findOne({ email });
    if (!user){
        res.status(400).send("Email does not exist");
        return;
    }

    // kiểm tra xem mật khẩu có đúng không
    if (!bcrypt.compareSync(password, user.password)){
        res.status(400).send("Invalid password");
        return;
    }

    // tạo token
    const token = jwt.sign({ _id: user._id, email }, JWT_SECRET, { expiresIn: "1h" });
    res.cookie('jwt', token, {
        httpOnly: true,
        secure: true,
        sameSite: 'none',
        maxAge: 60 * 60 * 1000
    });
    console.log("Login successful");
    const today = new Date().toDateString();
      if (!user.lastReset||user.lastReset.toDateString() !== today) {
            user.remainingMessages = 10;
            user.lastReset = new Date();
  await user.save();
  console.log("Reset remainingMessages to 10");

 }
    res.json({ token, user });
}

export const logout = (req, res) => {
    res.clearCookie('jwt');  // xóa cookie JWT
    res.json({ message: "Logout successful" });
}

export const checkAuth = async (req, res) => {
  try {
    const user = await User.findById(req.user._id).select('-password'); // không trả password
    if (!user) return res.status(404).json({ message: 'User not found' });
    res.status(200).json(user);
  } catch (error) {
    console.log("Error in checkAuth controller", error.message);
    res.status(500).json({ message: "Internal Server Error" });
  }
};


// xử lý quên mật khẩu
export const forgotPassword = async (req, res) => {
    const { email } = req.body;
    if (!email){
        res.status(400).send("Missing required information");
        return;
    }

    const user = await User.findOne({ email: req.body.email });
    if (!user){
        res.status(400).send("Email does not exist");
        return;
    }

    console.log("User ID:", user._id);

    // tạo token
    const reset_token = crypto.randomBytes(32).toString("hex");

    // lưu token vào trong csdl
    const newToken = new Token({
        userId: user._id,
        token: reset_token,
        expireAt: Date.now() + 15 * 60 * 1000 // 15 phút
    });
    await newToken.save();

    const reset_link = `${getClientDomain(req)}/${reset_token}`;
    await sendEmail(email, reset_link);
    res.json({ message: "Reset link has been sent to your email" });
}

// reset password
export const resetPassword = async (req, res) => {
    const { token } = req.params;
    const { newPassword } = req.body;
  
    if (!newPassword) {
      return res.status(400).send("Missing new password");
    }
  
    try {
      const tokenRecord = await Token.findOne({ token });
      if (!tokenRecord) {
        return res.status(400).send("Invalid or expired token");
      }
  
      const user = await User.findById(tokenRecord.userId);
      if (!user) {
        await Token.deleteOne({ _id: tokenRecord._id }); // Xóa token dù user không tồn tại
        return res.status(400).send("User not found");
      }
  
      // Sử dụng bcrypt bất đồng bộ
      user.password = await bcrypt.hash(newPassword, 10);
      await user.save();
  
      await Token.deleteOne({ _id: tokenRecord._id }); // Sử dụng deleteOne
  
      res.send("Password has been reset successfully");
    } catch (err) {
      console.error("Error resetting password: ", err);
      res.status(500).send("Internal Server Error");
    }
  }

// xử lý đăng nhập bằng Google OAuth thông qua Passport.js.
export const googleAuth = (req, res, next) => {
  passport.authenticate("google", { failureRedirect: "/login", session: false }, async (err, user) => {
    try {    
    
      if (err || !user) return res.redirect(`${getClientDomain(req)}/login?error=auth_failed`);
      
      const { id, displayName, emails } = user;
      let existingUser = await User.findOne({ GoogleId: id });
      if (!existingUser) {
        existingUser = new User({
          username: displayName,
          email: emails && emails.length > 0 ? emails[0].value : '',
          GoogleId: id
        });
        await existingUser.save();
      }

      // Tạo JWT và set vào HTTP-only cookie (như hiện tại)
      const token = jwt.sign({ _id: existingUser._id }, JWT_SECRET, { expiresIn: "1h" });
      res.cookie('jwt', token, {
        httpOnly: true,
        secure: true,
        sameSite: 'none',
        maxAge: 60 * 60 * 1000
      });
      
      // Redirect về frontend với success status
      res.redirect(`${getClientDomain(req)}/auth/oauth-success`);
    } catch (error) {
      res.redirect(`${getClientDomain(req)}/login?error=server_error`);
    }
  })(req, res, next);
};

// xử lý đăng nhập bằng Facebook OAuth thông qua Passport.js.
export const facebookAuth = (req, res, next) => {
    passport.authenticate("facebook", { failureRedirect: "/login", session: false }, async (err, user) => {
        if (err || !user) {
            return res.status(400).send("Authentication failed");
        }

        // lấy thông tin cần thiết từ user
        const { id, displayName } = user;
                // kiểm tra xem user đã tồn tại trong csdl chưa
                let existingUserFB = await User.findOne({ FacebookId: id });
                if (!existingUserFB) {
                    existingUserFB = new User({
                        username: displayName,
                        FacebookId: id
                    });
                    await existingUserFB.save();
                }
        
                // tạo token
                const tokenFB = jwt.sign({ _id: existingUserFB._id }, JWT_SECRET, { expiresIn: "1h" });
                res.cookie('jwt', tokenFB, {
                    httpOnly: true,
                    secure: true,
                    sameSite: 'none',
                    maxAge: 60 * 60 * 1000
                });
                res.redirect(`https://web-project-flame-five.vercel.app/chat`);
            })(req, res, next);
        };
        
```

### backend\src\controllers\message.controller.js
```js
// File: controllers/message.controller.js
import Celeb from '../models/celebs.model.js';
import Chat from '../models/chat.model.js';
import User from '../models/users.model.js';
import axios from 'axios';

//hiển thị người nổi tiếng ở sidebar bên trái
export const getCelebsForSidebar = async (req, res) => {
  try {// tìm tất cả Celeb có trong collection và hiển thị thông báo thành công
    const allCelebs = await Celeb.find({}); // select * from Celeb

    res.status(200).json(allCelebs);
  } catch (error) {
    console.error("Error in getting getCelebsForSidebar:", error.message);
    next(error);
  }
};

//khi mở một đoạn chat có sẵn, hiện ra lịch sử tin nhắn
export const getMessages = async (req, res) => {
  try {// lấy ID user và Celeb được chọn, và tìm tất cả tin nhắn do hai bên gửi và nhận
    const celebId = req.params.id;
    const userId = req.user._id;

    const messages = await Chat.find({
      $or: [
        { sender: userId, receiver: celebId },
        { sender: celebId, receiver: userId }
      ]
    }).sort({ createdAt: 1 }).populate('sender', 'username avatar');;

    res.status(200).json(messages);
  } catch (error)  {
    console.error("Error in getMessages:", error.message);
    next(error);
  }
};

// Hàm chuyển đổi tên celeb sang persona
function convertNameToPersona(name) {
  // Trường hợp đặc biệt
  const specialCases = {
    'Sơn Tùng MTP': 'son_tung',
  };
  if (specialCases[name]) return specialCases[name];
  return name
    .normalize('NFD') // Loại bỏ dấu tiếng Việt
    .replace(/\p{Diacritic}/gu, '')
    .toLowerCase()
    .replace(/[^a-z0-9 ]/g, '') // Loại bỏ ký tự đặc biệt
    .replace(/\s+/g, '_'); // Thay khoảng trắng bằng _
}

// Xử lý gửi tin nhắn: lưu message của user, gọi AI và lưu message trả lời
export const sendMessage = async (req, res, next) => {
  try {
    console.log('Req.body ➞', req.body);
    const celebId = req.params.id;
    const userId = req.user._id;
    const user = await User.findById(userId).select('tier remainingMessages');
      // Nếu đang free và đã dùng hết lượt
  if (user.tier === 'free' && user.remainingMessages <= 0) {
     return res.status(403).json({
       error: 'Bạn đã hết số lần nhắn tin miễn phí trong ngày. Vui lòng nâng cấp gói premium để tiếp tục.'
    });
   }
    const messageText = req.body.message;
       if (user.tier === 'free') {
        user.remainingMessages -= 1;
        await user.save();
  }

    // 1. Lưu tin nhắn người dùng
    const userMessage = await Chat.create({
      message: messageText,
      sender: userId,
      receiver: celebId,
      userType: user.GoogleId ? 'google_user' : 'user',
      timestamp: Date.now()
    });

    // 2. Phát tin nhắn người dùng tới frontend
    const io = req.app.get('io');
    io.to(`user_${userId}`).emit('ai_typing_start');
    io.to(`user_${userId}`).emit('newMessage', {
      ...userMessage.toObject(),
      userType: user.GoogleId ? 'google_user' : 'user',
      isUserMessage: true
    });

    // 3. Gọi model nội bộ (FastAPI)
   const celeb = await Celeb.findById(celebId);
   const persona = convertNameToPersona(celeb.celebName);
   let aiText;
   try {
     const modelResp = await axios.post(
       "https://3a07-2405-4802-9015-38b0-4d3e-3b6e-95f3-48d3.ngrok-free.app/generate", // Thay đổi endpoint thành /chat
       {
         prompt: messageText,
         api_key: "memaybeo",
         persona: persona
       },
       {
         headers: {
           "Content-Type": "application/json",
           "ngrok-skip-browser-warning": "true"
         }
       }
     );

     // Xử lý response mới
     aiText = modelResp.data.response.trim(); // Lấy từ trường response thay vì trực tiếp

   } catch (err) {
         console.error("=== AI Model Error ===");
         if (err.response) {
           console.error("Status:", err.response.status);
           console.error("Headers:", err.response.headers);
           console.error("Data:", err.response.data);
         } else {
           console.error("No response:", err.message);
         }

         io.to(`user_${userId}`).emit('ai_typing_end');
         return res.status(502).json({
           error: "Custom AI engine unreachable",
           details: err.response?.data || err.message,
         });
       }

       // 4. Lưu tin nhắn AI
       const aiMessage = await Chat.create({
         message: aiText,
         sender: celebId,
         receiver: userId,
         userType: 'ai'
       }).then(msg => msg.populate('sender'));

       // 5. Phát tin nhắn AI tới frontend
       io.to(`user_${userId}`).emit('newMessage', {
         ...aiMessage.toObject(),
         isUserMessage: false,
         userType: 'ai'
       });
       io.to(`user_${userId}`).emit('ai_typing_end');

       // 6. Trả về response cho client
       res.status(201).json({ userMessage, aiMessage });
     } catch (error) {
       console.error("Message handling error:", error);
       const io = req.app.get('io');
       io.to(`user_${req.user._id}`).emit('ai_typing_end');
       next(error);
     }
};
```

### backend\src\middleware\auth.middleware.js
```js
import jwt from "jsonwebtoken";
import dotenv from 'dotenv';
// xác thực JWT token
// export const verifyToken = async (req, res) => {
//     const token = req.header("authorization"); // lấy token từ header

//     // nếu không có token thì trả về lỗi
//     if (!token) {
//         res.status(403).send("Token not provided");
//         return;
//     }
    
//     // kiểm tra token
//     try {
//         const verified = jwt.verify(token, process.env.JWT_SECRET);
//         req.user = verified;
//         next();
//     } catch (err) {
//         res.status(401).send("Invalid token");
//     }
// };

dotenv.config();
const JWT_SECRET = process.env.JWT_SECRET;
// xác thực JWT token
export const verifyToken = async (req, res, next) => {
    try {
        const token = req.cookies.jwt;
    
        if (!token) {
          return res.status(401).json({ error: 'No token' });
        }
    
        // kiểm tra token
        const decoded = jwt.verify(token, JWT_SECRET);
        // Lưu user info vào req
        req.user = decoded;
        //console.log(req.user);
        next();
      } catch (err) {
        console.error(err);
        return res.status(403).json({ error: 'Invalid token' });
      }
};
```

### backend\src\models\celebs.model.js
```js
import mongoose from 'mongoose';

const celebSchema = new mongoose.Schema({
    celebName: {
        type: String,
        required: true
    },
    profilePic: {
        type: String,
        default: ""
    },
    prompt: {
        type: String,
        required: true,
        default: ""
    },
}, { timestamps: true });

const Celeb = mongoose.model("Celeb", celebSchema);

export default Celeb;
```

### backend\src\models\chat.model.js
```js
import mongoose from 'mongoose';

const chatSchema = new mongoose.Schema({
  message: {
    type: String,
    required: true
},
  sender: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  receiver: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  userType: {
    type: String,
    enum: ['user', 'google_user', 'ai'],
    required: true
  },
  createdAt: { type: Date, default: Date.now }
});

export default mongoose.model('Chat', chatSchema);
```

### backend\src\models\token.model.js
```js
import mongoose from "mongoose";

const tokenSchema = new mongoose.Schema({
    userId: {
        type: mongoose.Schema.Types.ObjectId,
        ref: "User",
        required: true
    },
    token: {
        type: String,
        required: true
    },
    expireAt: {
        type: Date,
        default: Date.now,
        index: {expires: "1d"}
    }
}, {timestamps: true});

const Token = new mongoose.model("Token", tokenSchema);
export default Token; //export Token để có thể sử dụng ở các file khác
```

### backend\src\models\users.model.js
```js
//định nghĩa collection users
import mongoose from "mongoose";

const userSchema = new mongoose.Schema({
    username: {
        type: String,
        required: true,
        unique: true,
    },
    password: {
        type: String,
        required: function(){
            return !this.GoogleId && !this.FacebookId;
        },

        minlength: [8, 'Mật khẩu cần phải có ít nhất 8 ký tự!'],
    },
    email: {
        type: String,
        required: function(){
            return !this.GoogleId && !this.FacebookId;
        },
        unique: true,
        // match: [/.+\@.+\..+/, 'Plesae fill a valid email address']
    },
    GoogleId: {
        type: String // Không required
    },
      FacebookId: {
        type: String // Không required
    },
    profilePic: {
        type: String,
        default: ""
    },
    tier:{
        type: String,
        enum: ['free', 'premium'],
        default: 'free'
    },remainingMessages: {
        type: Number,
        default: 10 // Số tin nhắn miễn phí ban đầu
    },
    lastReset: { type: Date, default: () => new Date() },

}, { timestamps: true } 
);

const User = new mongoose.model("User", userSchema);

export default User;
```

### backend\src\routes\auth.route.js
```js
// nơi này để xử lí thông tin đăng kí, đăng nhập và đăng xuất
import express from 'express';
import passport from 'passport';
import {
    signup,
    login,
    logout,
    forgotPassword,
    resetPassword,
    googleAuth,
    facebookAuth,
    checkAuth
} from '../controllers/auth.controller.js';
import { verifyToken } from '../middleware/auth.middleware.js';

const router = express.Router();

router.post("/signup", signup);
router.post("/login", login);
router.post("/logout", logout);
router.post("/forgot-password", forgotPassword);
router.post("/reset-password/:token", resetPassword);
router.get("/check", verifyToken, checkAuth);

// Đăng nhập với Google
router.get("/google", passport.authenticate("google", { scope: ["profile", "email"] }));
router.get("/google/callback", googleAuth);

// Đăng nhập với Facebook
router.get("/facebook", passport.authenticate("facebook"));
router.get("/facebook/callback", facebookAuth);

export default router;

```

### backend\src\routes\message.route.js
```js
// File: routes/message.route.js
import express from 'express';
import { verifyToken } from '../middleware/auth.middleware.js';
import {
    getCelebsForSidebar,
    getMessages,
    sendMessage
} from '../controllers/message.controller.js';

const router = express.Router();
router.post('/send', async (req, res) => {
    try {
      const { message, receiver } = req.body;
      
      const newMessage = new Chat({
        message,
        sender: req.user._id, // Lấy từ middleware xác thực
        receiver
      });
  
      const savedMessage = await newMessage.save();
      
      // Gửi real-time
      const io = req.app.get('io');
      io.to(userSocketMap[receiver]).emit('receiveMessage', savedMessage);
      
      res.status(201).json(savedMessage);
    } catch (err) {
      res.status(500).json({ error: err.message });
    }
  });
router.get("/", verifyToken, getCelebsForSidebar); //hiện danh sách người nổi tiếng ở sidebar
router.get("/get/:id", verifyToken, getMessages);//hiện tin nhắn tại chat có sẵn
router.post("/send/:id", verifyToken, sendMessage);//gửi tin nhắn tại đoạn chat cụ thể

export default router;

```

### backend\src\routes\tts.route.js
```js
import express from 'express';
import axios from 'axios';

const router = express.Router();

router.post('/', async (req, res) => {
  const text = req.body.text;
  if (!text) return res.status(400).json({ error: 'Text is required' });

  try {
    // Gọi FPT AI để lấy URL audio
    const response = await axios.post(
      'https://api.fpt.ai/hmi/tts/v5',
      text,
      {
        headers: {
          'api-key': process.env.FPT_AI_API_KEY, // Đặt key trong .env
          'speed': '1',
          'voice': 'leminh',
          'Content-Type': 'text/plain'
        }
      }
    );
    const audioUrl = response.data.async;

    // Đợi file audio sẵn sàng (FPT AI cần 1-2s)
    await new Promise(resolve => setTimeout(resolve, 2000));

    // Backend tải file audio về
    const audioResponse = await axios.get(audioUrl, { responseType: 'arraybuffer' });

    // Trả về file audio cho frontend
    res.setHeader('Content-Type', 'audio/mpeg');
    res.send(Buffer.from(audioResponse.data));
  } catch (error) {
    console.error('TTS Error:', error.response?.data || error.message);
    res.status(500).json({ error: 'TTS failed' });
  }
});

export default router;

```

### backend\src\routes\vnpay.route.js
```js
import express from 'express';
import qs from "qs";
import crypto from "crypto";
import moment from 'moment';
import { verifyToken } from '../middleware/auth.middleware.js';  
import User from '../models/users.model.js'; 
const router = express.Router();

function sortObject(obj){
    let sorted = {};
    let str = [];
    let key;
    for (key in obj){
        if (obj.hasOwnProperty(key)){
            str.push(encodeURIComponent(key));
        }
    }
    str.sort();
    for (key = 0; key < str.length; key++){
        sorted[str[key]] = encodeURIComponent(obj[str[key]]).replace(/%20/g, "+");
    }
    return sorted;
}

router.post("/create-payment", async (req, res) => {

    const ipAddr = req.headers['x-forwarded-for'] ||
    req.connection.remoteAddress ||
    req.socket.remoteAddress ||
    req.connection.socket.remoteAddress;

  // Cấu hình tham số
  const tmnCode = "SNBUG3T2";
  const secretKey = "1VIULX38MI6P6YB5P04A8WRJVFCBZRQ4";
  const vnpUrl = "https://sandbox.vnpayment.vn/paymentv2/vpcpay.html";
  const returnUrl = "https://celebritychatbot.up.railway.app/api/vnpay/check-payment";


  // Format date for VNPAY (YYYYMMDDHHmmss)
  const date = new Date();
  const createDate = moment(date).format("YYYYMMDDHHmmss");

  // Create order ID like VNPAY example
  const orderId = moment(date).format("DDHHmmss");


  // Tạo các tham số bắt buộc
  const params = {
    vnp_Version: "2.1.0",
    vnp_Command: "pay",
    vnp_TmnCode: tmnCode,
    vnp_Amount: 250000 * 100,
    vnp_CreateDate: createDate,
    vnp_CurrCode: "VND",
    vnp_IpAddr: ipAddr,
    vnp_Locale: "vn",
    vnp_OrderInfo: "THANH TOAN CELEBRITY PRO",
    vnp_OrderType: "other",
    vnp_ReturnUrl: returnUrl,
    vnp_TxnRef: orderId
  };


  let vnp_Params = sortObject(params);

  const signData = qs.stringify(vnp_Params, { encode: false });
  const hmac = crypto.createHmac("sha512", secretKey);
  const signed = hmac.update(Buffer.from(signData, 'utf-8')).digest("hex");

  // Add hash to parameters
  vnp_Params['vnp_SecureHash'] = signed;
  // Thêm chữ ký vào URL
  const paymentUrl = `${vnpUrl}?${qs.stringify(vnp_Params, { encode: false })}`;

  res.status(201).json({ paymentUrl });
});

router.get('/check-payment', verifyToken, async (req, res) => {
    //logic xử lý dữ liệu đơn hàng
    console.log(req.query);

    const vnp_Params = req.query;
    const secretKey = "1VIULX38MI6P6YB5P04A8WRJVFCBZRQ4";
    
    // Get secure hash from request
    const secureHash = vnp_Params['vnp_SecureHash'];
    
    // Remove hash from params before validation
    delete vnp_Params['vnp_SecureHash'];
    delete vnp_Params['vnp_SecureHashType'];
    
    // Sort parameters
    const sortedParams = sortObject(vnp_Params);

    // Create validation signature
    const signData = Object.keys(sortedParams)
        .map(key => `${key}=${sortedParams[key]}`)
        .join('&');
        
    const hmac = crypto.createHmac("sha512", secretKey);
    const signed = hmac.update(Buffer.from(signData, 'utf-8')).digest("hex");

    // Compare signatures
    const isValidSignature = secureHash === signed;

    try {
        if (isValidSignature) {
            const vnp_ResponseCode = vnp_Params['vnp_ResponseCode'];
            
            if (vnp_ResponseCode === '00') {
                   await User.findByIdAndUpdate(
          req.user._id,
          { tier: 'premium' },
          { new: true }
        );
                return res.redirect('https://web-project-flame-five.vercel.app/chat?payment=success');
            } else {
                // Payment failed
                console.log('Payment failed with code:', vnp_ResponseCode);
                return res.redirect('https://web-project-flame-five.vercel.app/chat?payment=failed');
            }
        } else {
            // Invalid signature
            console.log('Invalid signature');
            console.log('Expected:', signed);
            console.log('Received:', secureHash);
            return res.redirect('https://web-project-flame-five.vercel.app/chat?payment=invalid');
        }
    } catch (error) {
        console.error('Payment verification error:', error);
        return res.redirect('https://web-project-flame-five.vercel.app/chat?payment=error');
    }
});

export default router;

```

### frontend\eslint.config.js
```js
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...reactHooks.configs.recommended.rules,
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]

```

### frontend\vite.config.js
```js
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
})

```

### frontend\src\App.jsx
```jsx
import Home from "./page/web_page/Home.jsx";
import Login from "./page/login/login.jsx";
import Chat from "./page/chat/chat.jsx";
import Payment from "./page/payment/payment.jsx";
import ForgotPasswordPage from "./page/login/ForgotPasswordPage.jsx";
import ResetPasswordPage from "./page/login/ResetPasswordPage.jsx";
import OAuthSuccess from "./page/login/OAuthSuccess.jsx";
import Interview from "./page/interview/interview.jsx";

import { lazy, Suspense } from "react";
import { useAuthStore } from "./store/useAuthStore";
import { Routes, Route, Navigate } from "react-router-dom";
import { Toaster } from "react-hot-toast";

function App() {
  const { authUser } = useAuthStore();
  return (
    <>
      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/auth/login" element={authUser ? <Navigate to="/chat" /> : <Login />} />
        <Route path="/auth/oauth-success" element={<OAuthSuccess />} /> 
        <Route path="/forgot-password" element={<ForgotPasswordPage />} />
        <Route path="/reset-password/:token" element={<ResetPasswordPage />} />
        <Route 
          path="/chat" 
          element={authUser ? <Chat /> : <Navigate to="/auth/login" />} 
        />
        <Route 
          path="/payment" 
          element={authUser ? <Payment /> : <Navigate to="/auth/login" />}
        />
        <Route path="/interview" element={<Interview />} />
      </Routes>
      <Toaster />
    </>
  );
}

export default App;

```

### frontend\src\Appthamkhao.jsx
```jsx
import React, { useState } from "react";
import {
  BrowserRouter as Router,
  Routes,
  Route,
  Navigate,
} from "react-router-dom";
import LoginApp from "./page/loginApp"; // giao diện login;
import ChatApp from "./page/chatApp"; // giao diện chat box;

const App = () => {
  const [isAuthenticated, setIsAuthenticated] = useState(false);

  const handleLoginSuccess = () => {
    setIsAuthenticated(true);
  };

  return (
    <Router>
      <Routes>
        <Route
          path="/auth/login"
          element={<LoginApp onLoginSuccess={handleLoginSuccess} />}
        />
        {/* Nếu chưa đăng nhập, cố gắng truy cập /chat sẽ chuyển hướng về /login */}
        <Route
          path="/chat"
          element={
            isAuthenticated ? <ChatApp /> : <Navigate to="/auth/login" />
          }
        />
        <Route path="*" element={<Navigate to="/auth/login" />} />
      </Routes>
    </Router>
  );
};

export default App;

```

### frontend\src\checkrestpass.jsx
```jsx
import page_reset from "./page/login/forgot_password";
import { Routes, Route } from "react-router-dom";
function App() {
  return (
    <>
      <Routes>
        <Route path="/" element={<page_reset />} />
      </Routes>
    </>
  );
}

export default App;

```

### frontend\src\main.jsx
```jsx
import { StrictMode } from "react";
import { createRoot } from "react-dom/client";
import { BrowserRouter as Router } from "react-router-dom";
import App from "./App.jsx";
import React from "react";

createRoot(document.getElementById("root")).render(
  <StrictMode>
    <Router>
      <App />
    </Router>
  </StrictMode>
);
```

### frontend\src\reportWebVitals.js
```js
const reportWebVitals = (onPerfEntry) => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import("web-vitals").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

```

### frontend\src\setupTests.js
```js
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import "@testing-library/jest-dom";

```

### frontend\src\components\chat\alertdemo.jsx
```jsx
import React from 'react';

const AlertDemo = () => {
  return (
    // Đây là một thông báo demo, hiển thị ở dưới cùng của chatbox.
    <div className="alert-demo" style={{ fontSize: '0.85rem', textAlign: 'center', marginTop: '0.5rem', color: '#555' }}>
      Đây là phiên bản thử nghiệm, các tính năng có thể không hoạt động như mong đợi.
    </div>
  );
};

export default AlertDemo;

```

### frontend\src\components\chat\bodysidebar.jsx
```jsx
import React, { useState } from 'react';
import Celebs from './celebs';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faMagnifyingGlass, faGear } from '@fortawesome/free-solid-svg-icons';
import { useAuthStore } from '../../store/useAuthStore';
import { useNavigate } from 'react-router-dom';
import defaultAvatar from '../../assets/chat/default-avatar.png';
import '../../style/chat/sidebar.css';

// Component này dùng để hiển thị phần giữa của sidebar, bao gồm thanh tìm kiếm và danh sách các nhân vật nổi tiếng (celebs).
const BodySidebar = ({ celebs, useSelectedCeleb, handleSelect }) => {
  // State để lưu giá trị tìm kiếm
  const [search, setSearch] = useState('');
  const [showMenu, setShowMenu] = useState(false);
  const { authUser, LogOut } = useAuthStore();
  const navigate = useNavigate();

  const handleLogout = async () => {
    await LogOut();
    navigate('/auth/login');
  }

  // State để lưu danh sách các nhân vật nổi tiếng (celebs) đã được lọc theo từ khóa tìm kiếm
  const filtered = celebs.filter((c) =>
    c.celebName.toLowerCase().includes(search.toLowerCase())
  );
  return (
    <>
      <div className="sidebar-body">
        <div className="search-bar">
          {/*Thanh tìm kiếm*/}
          <FontAwesomeIcon icon={faMagnifyingGlass} className="search-icon" />
          <input
            /* Input tìm kiếm */
            className="search-input"
            type="text"
            placeholder="Tìm kiếm nhân vật"
            value={search}
            onChange={(e) => setSearch(e.target.value)}
          />
        </div>
        {/*Danh sách các nhân vật nổi tiếng (celebs) đã được lọc theo từ khóa tìm kiếm*/}
        <Celebs
          celebs={filtered}
          useSelectedCeleb={useSelectedCeleb}
          handleSelect={handleSelect}
        />
      </div>
      <div className="sidebar-settings">
        <button className="settings-button" onClick={() => setShowMenu(!showMenu)}>
          <FontAwesomeIcon icon={faGear} />
          <span>Cài đặt</span>
        </button>

        {showMenu && (
          <div className="settings-dropdown">
            <div className="account-info">
              <img
                src={authUser?.profilePic || defaultAvatar}
                alt="avatar"
                className="avatar"
              />
              <div className="info-text">
                <p className="name">{authUser?.username}</p>
                <p className="tier">Trạng thái: <span>{authUser?.tier}</span></p>
              </div>
            </div>
            {authUser?.tier !== 'premium' && (
              <button className="settings-option" onClick={() => navigate('/payment')}>
                Nâng cấp gói
              </button>
            )}
            <button className="settings-option" onClick={handleLogout}>Đăng xuất</button>
          </div>
        )}
      </div>
    </>
  );
};

export default BodySidebar;

```

### frontend\src\components\chat\celebs.jsx
```jsx
import React from 'react';

// Component để hiển thị danh sách các nhân vật nổi tiếng (celebs) trong sidebar của chatbox.
const Celebs = ({ celebs, selectedCeleb, handleSelect }) => {
  return (
    <div className="celebs">
      {/* Map các nhân vật nổi tiếng (celebs) và hiển thị chúng */}
      {celebs.map((celeb) => (
        <div
          key={celeb._id}
          // Nếu celeb được chọn thì thêm class 'selected' để xác định trạng thái được chọn
          className={`celebs-item ${selectedCeleb?._id === celeb._id ? 'selected' : ''}`}
          // Khi nhấn vào celeb, gọi hàm handleSelect để xử lý sự kiện chọn celeb
          onClick={() => handleSelect(celeb)}
        >
          {/*Hiển thị ảnh đại diện và tên của celeb*/}
          <img src={celeb.profilePic} alt={celeb.celebName} className="celebs-avatar" />
          <span className="celebs-name">{celeb.celebName}</span>
        </div>
      ))}
    </div>
  );
};

export default Celebs;

```

### frontend\src\components\chat\chatbox.jsx
```jsx
import React from 'react';
import HeaderChatbox from './headerchatbox';
import HistoryChatbox from './historychatbox';
import TypeChatbox from './typechatbox';
import AlertDemo from './alertdemo';
import { useChatStore } from '../../store/useChatStore.js';
import { useAuthStore } from '../../store/useAuthStore.js';
import '../../style/chat/chatbox.css';

const Chatbox = () => {
  const { useSelectedCeleb } = useChatStore();
  return (
    <div className="chatbox">
      {useSelectedCeleb ? (
        <>
          <HeaderChatbox selectedCeleb={useSelectedCeleb} />
          <HistoryChatbox />
          <TypeChatbox />
          <AlertDemo />
        </>
      ) : (
        <div className="chatbox-placeholder">
          <span className="placeholder">Chào mừng bạn đến với AI Chatbot!</span>
        </div>
      )}
    </div>
  );
};

export default Chatbox;

```

### frontend\src\components\chat\footersidebar.jsx
```jsx
import React from 'react';

// component để hiển thị thông tin ở footer của sidebar
const FooterSidebar = () => {
  return (
    <div className="sidebar-footer">
      <p>Developed by group 4</p>
    </div>
  );
};

export default FooterSidebar;

```

### frontend\src\components\chat\headerchatbox.jsx
```jsx
import React from 'react';

// component này đại diện cho header của chatbox, bao gồm ảnh đại diện và tên của người nổi tiếng được chọn
const HeaderChatbox = ({ selectedCeleb }) => {
  return (
    <div className="chatbox-header">
      {selectedCeleb ? (
        <>
          <img
            src={selectedCeleb.profilePic}
            alt={selectedCeleb.name}
            className="chatbox-avatar"
          />
          <span className="chatbox-name">{selectedCeleb.celebName}</span>
        </>
      ) : (
        <span className="placeholder-text">Chào mừng bạn!</span>
      )}
    </div>
  );
};

export default HeaderChatbox;

```

### frontend\src\components\chat\headersidebar.jsx
```jsx
import React from 'react';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faBars, faEllipsisVertical } from '@fortawesome/free-solid-svg-icons';

// component này đại diện cho header của sidebar, bao gồm tiêu đề và nút thu gọn/ mở rộng sidebar
const HeaderSidebar = ({ isCollapsed, onToggle }) => {
  return (
    <div className="sidebar-header">
      <h3 className="sidebar-title">AI Chatbot</h3>
      {/* Button để thu gọn hoặc mở rộng sidebar */}
      <button className="sidebar-toggle-btn" onClick={onToggle}>
        {/* Hiển thị button tương ứng với trạng thái của sidebar (đang thu gọn hoặc mở rộng) */}
        <FontAwesomeIcon icon={isCollapsed ? faEllipsisVertical : faBars} />
      </button>
    </div>
  );
};

export default HeaderSidebar;

```

### frontend\src\components\chat\historychatbox.jsx
```jsx
import React, { useEffect, useRef, useState } from 'react';
import '../../style/chat/chatbox.css';
import { useAuthStore } from "../../store/useAuthStore.js";
import { useChatStore } from "../../store/useChatStore.js";
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faHeadphones } from '@fortawesome/free-solid-svg-icons';
import { toast } from 'react-hot-toast';

const spinStyle = `
@keyframes spin {
  0% { transform: rotate(0deg);}
  100% { transform: rotate(360deg);}
}
.icon-spinning {
  animation: spin 1s linear infinite;
  display: inline-block;
}
`;

const HistoryChatbox = () => {
  const [isAITyping, setIsAITyping] = useState(false);
  const [playingId, setPlayingId] = useState(null);
  const [ttsLoading, setTtsLoading] = useState(null);
  const [ttsError, setTtsError] = useState(null);
  const [audioUrlMap, setAudioUrlMap] = useState({});
  const [spinningId, setSpinningId] = useState(null);
  const {
    messages,
    getMessages,
    useSelectedCeleb,
    subscribeToMessages,
    unsubscribeFromMessages,
  } = useChatStore();
  const { authUser, socket } = useAuthStore();
  const bottomRef = useRef(null);
  const audioRef = useRef(null);

  // Scroll to bottom when messages change
  const scrollToBottom = () => {
    bottomRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    if (!socket || !useSelectedCeleb || !authUser?._id) return;
    const userRoom = `user_${authUser._id}`;
    socket.emit('joinRoom', userRoom);
    getMessages(useSelectedCeleb._id);
    return () => {
      socket.emit('leaveRoom', userRoom);
    };
  }, [socket, authUser._id, useSelectedCeleb]);

  useEffect(() => {
    if (!socket) return;
    subscribeToMessages();
    return () => unsubscribeFromMessages();
  }, [socket]);

  useEffect(() => {
    if (!socket) return;
    const handleError = (error) => {
      console.error('Socket error:', error);
      setIsAITyping(false);
    };
    socket.on('error', handleError);
    socket.on('ai_typing_start', () => setIsAITyping(true));
    socket.on('ai_typing_end', () => setIsAITyping(false));
    return () => {
      socket.off('error', handleError);
      socket.off('ai_typing_start');
      socket.off('ai_typing_end');
    };
  }, [socket]);

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  // Cleanup audio when component unmounts
  useEffect(() => {
    return () => {
      if (audioRef.current) {
        audioRef.current.pause();
        audioRef.current = null;
      }
    };
  }, []);

  // Hàm gọi TTS backend và phát audio
  const handlePlayTTS = async (message, id) => {
    if (audioRef.current) {
      audioRef.current.pause();
      audioRef.current = null;
    }
    setSpinningId(id);

    try {
      const response = await fetch('https://celebritychatbot.up.railway.app/api/tts', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ text: message })
      });
      if (!response.ok) throw new Error('TTS request failed');
      const blob = await response.blob();
      const audioUrl = URL.createObjectURL(blob);
      const audio = new Audio(audioUrl);
      audioRef.current = audio;

      audio.onended = () => {
        setSpinningId(null);
        URL.revokeObjectURL(audioUrl);
      };

      audio.onerror = () => {
        setSpinningId(null);
        URL.revokeObjectURL(audioUrl);
      };

      await audio.play();
    } catch (err) {
      setSpinningId(null);
      console.error('TTS Error:', err);
    }
  };

  return (
    <>
      <style>{spinStyle}</style>
      <div className="historychatbox">
        {messages.length > 0 ? (
          messages.map((message) => {
            const senderId = message.sender?._id || message.sender;
            const isUserMessage = message?.userType && message.userType !== 'ai';
            const isPlaying = playingId === (message._id || `temp-${message.timestamp}`);
            const isLoading = ttsLoading === (message._id || `temp-${message.timestamp}`);
            const hasError = ttsError === (message._id || `temp-${message.timestamp}`);
            return (
              <div
                className={`chat-message ${isUserMessage ? 'user-message' : 'bot-message'}`}
                key={message._id || `temp-${message.timestamp}`}
              >
                <p>{message.message}</p>
                {!isUserMessage && (
                  <div>
                    <button
                      className="button-text-to-speech"
                      title="Nghe"
                      onClick={async () => {
                      if (authUser.tier !== 'premium') {
                      toast.error('Tính năng Text-to-Speech chỉ dành cho tài khoản premium. Vui lòng nâng cấp.');
                      return;
                       }
                      handlePlayTTS(message.message);}}
                    >
                      <FontAwesomeIcon
                        icon={faHeadphones}
                        className={spinningId === (message._id || `temp-${message.timestamp}`) ? 'icon-spinning' : ''}
                      />
                    </button>
                    {audioUrlMap[message._id || `temp-${message.timestamp}`] && (
                      <audio
                        controls
                        src={audioUrlMap[message._id || `temp-${message.timestamp}`]}
                        style={{ marginLeft: 8, verticalAlign: 'middle' }}
                      />
                    )}
                  </div>
                )}
              </div>
            );
          })
        ) : (
          <div className="empty-chat">
            <p>Start a conversation with {useSelectedCeleb?.celebName}!</p>
          </div>
        )}
        <div ref={bottomRef} />
        {isAITyping && (
          <div className="ai-typing-indicator">
            <span>{useSelectedCeleb?.celebName} đang trả lời</span>
            <div className="typing-dots">
              <div className="dot"></div>
              <div className="dot"></div>
              <div className="dot"></div>
            </div>
          </div>
        )}
      </div>
    </>
  );
};

export default HistoryChatbox;
```

### frontend\src\components\chat\sidebar.jsx
```jsx
import React, { useState } from 'react';
import BodySidebar from './bodysidebar';
import FooterSidebar from './footersidebar';
import '../../style/chat/sidebar.css';

import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faBars, faEllipsisVertical } from '@fortawesome/free-solid-svg-icons';


// component này đại diện cho sidebar, bao gồm header, nội dung và footer
const Sidebar = ({ celebs, selectedCeleb, handleSelect, isCollapsed, toggleSidebar: toggleSidebarProp }) => {
  // State để lưu trạng thái thu gọn hoặc mở rộng sidebar
  const [collapsed, setCollapsed] = useState(false);
  const isMobile = window.innerWidth <= 768; // Kiểm tra nếu là thiết bị di động
  // Hàm để thay đổi trạng thái thu gọn hoặc mở rộng sidebar
  const handleToggleSidebar = () => {
    setCollapsed(!collapsed);
    toggleSidebarProp(); // Call the prop function if needed
  };
  return (
    <div className={`sidebar-wrapper ${isCollapsed ? 'collapsed' : ''}`}>
      <div className="sidebar-header">
        {/* Tiêu đề của sidebar */}
        <h2 className="sidebar-title">AI Chatbot</h2>
        {/* Button giờ sẽ gọi hàm toggleSidebar từ props của cha */}
        <button className="sidebar-toggle-btn" onClick={handleToggleSidebar}>
          {/* Thay đổi icon dựa trên prop isCollapsed */}
          <FontAwesomeIcon icon={isCollapsed ? faBars : faEllipsisVertical} />
        </button>
      </div>
      {/* Nếu sidebar không bị thu gọn thì hiển thị nội dung bên trong */}
      {!isCollapsed && (
        <div className="sidebar-content">
          {/* Phần giữa của sidebar */}
          <BodySidebar
            celebs={celebs}
            selectedCeleb={selectedCeleb}
            handleSelect={(celebs) => {
              handleSelect(celebs);
              if (isMobile) {
                toggleSidebarProp();
              }
            }}
          />
          {/* Phần dưới của sidebar */}
          <FooterSidebar />
        </div>
      )}
    </div>
  );
};

export default Sidebar;

```

### frontend\src\components\chat\typechatbox.jsx
```jsx
import React, { useState } from 'react';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faFileAudio, faPaperPlane } from '@fortawesome/free-solid-svg-icons';
import { useChatStore } from "../../store/useChatStore.js";
import { toast } from 'react-hot-toast';
import { useAuthStore } from "../../store/useAuthStore.js";
const TypeChatbox = () => {
  const [message, setMessage] = useState('');
  const { sendMessage } = useChatStore();
  const { authUser } = useAuthStore(); // giả sử toast từ react-hot-toast
  const handleSend = async (e) => {
    e.preventDefault();
    if (!message.trim()) return;
    if (authUser.tier === 'free' && authUser.remainingMessages <= 0) {
      toast.error('Bạn đã hết số lần nhắn tin miễn phí trong ngày. Vui lòng nâng cấp gói premium để tiếp tục.');
      return;
    }
    setMessage("");
    try {
      await sendMessage({
        message: message.trim(),
      });
    } catch (error) {
      console.error("Failed to send message:", error);
    }
  };

  const handleKeyDown = (e) => {
    if (e.key === 'Enter') {
      handleSend(e);
    }
  };



  return (
    <div className="typechatbox">

      <input
        className="typechatbox-input"
        placeholder="Nhập tin nhắn..."
        type="text"
        value={message}
        onChange={(e) => setMessage(e.target.value)}
        onKeyDown={handleKeyDown}
      />
      <button
        className="typechatbox-send"
        onClick={handleSend}
        disabled={!message.trim()}
      >
        <FontAwesomeIcon icon={faPaperPlane} />
      </button>
    </div>
  );
};

export default TypeChatbox;

```

### frontend\src\components\login\Form4all.jsx
```jsx

```

### frontend\src\components\login\Input_Fields.jsx
```jsx
// import { useState } from "react";

// // ham nay dinh nghia cac fields co trong form
// export default function Input_Field({ icon, type, placeholder, onChange }) {
//   const [isPasswordShown, setIsPasswordShown] = useState(false);
//   // bien nay duoc khai bao de kiem tra xem password co duoc hien hay an

//   return (
//     <div className="input-field">
//       <i className="material-symbols-rounded">{icon}</i>
//       <input // xu li input dau vao
//         type={isPasswordShown && type === "password" ? "text" : type}
//         placeholder={placeholder}
//         onChange={onChange}
//         required
//         {...(type === "email"
//           ? {
//               // format nhap email
//               pattern: "^[a-zA-Z0-9._%+-]+@gmail.com$",
//             }
//           : type === "password"
//           ? {
//               minLength: 8,
//             }
//           : {})}
//       />

//       {type === "password" && (
//         <i
//           onClick={() => setIsPasswordShown((prev) => !prev)}
//           className="material-symbols-rounded eye-icon"
//           style={{ cursor: "pointer" }}
//         >
//           {isPasswordShown ? "visibility" : "visibility_off"}
//         </i>
//       )}
//     </div>
//   );
// }


// src/components/login/Input_Fields.jsx
import { useState } from "react";

export default function Input_Field({
  name,
  icon,
  type,
  placeholder,
  value,
  onChange,
  // bạn có thể thêm prop pattern từ bên ngoài nếu muốn override
  pattern: customPattern,
}) {
  const [isPasswordShown, setIsPasswordShown] = useState(false);

  // Tự sinh pattern cho email nếu user không truyền customPattern
  const emailPattern = "^[A-Za-z0-9._%+\\-]+@gmail\\.com$";
  const finalPattern = type === "email" ? (customPattern || emailPattern) : undefined;

  return (
    <div className="input-field">
      <i className="material-symbols-rounded">{icon}</i>
      <input
        name={name}                                        // Bắt buộc
        type={isPasswordShown && type === "password" ? "text" : type}
        placeholder={placeholder}
        value={value}                                      // Bắt buộc để controlled component
        onChange={onChange}                                // Bắt buộc để update state
        required
        {...(type === "email"
          ? { pattern: finalPattern }
          : type === "password"
          ? { minLength: 8 }
          : {})}
      />

      {type === "password" && (
        <i
          onClick={() => setIsPasswordShown((prev) => !prev)}
          className="material-symbols-rounded eye-icon"
          style={{ cursor: "pointer" }}
        >
          {isPasswordShown ? "visibility" : "visibility_off"}
        </i>
      )}
    </div>
  );
}
```

### frontend\src\components\web_page\container-button.jsx
```jsx
import "../../style/web_page/ContainerButton.css";
import { Link } from "react-router-dom";

function ContainerButton() {
  return (
    <div className="container-button">
       <a
        className="button-part"
        href="https://forms.gle/u54WnLQZ9d6Pa7TR8"
        target="_blank"
        rel="noopener noreferrer"
      >
        <h3>Đóng góp ý kiến!</h3>
        <p>Hãy cho chúng mình ý kiến phản hồi của bạn!</p>
      </a>
      
            <Link className="button-part" to ="/interview">
        <h3> Giới thiệu chung </h3>
        <p> Web này là gì có ăn được không? </p>
      </Link>
    </div>
  );
}
export default ContainerButton;

```

### frontend\src\components\web_page\footer.jsx
```jsx
import React from "react";
import "../../style/web_page/footer.css";

const footer = () => {
  const currentYear = new Date().getFullYear();
  {
    /* Chưa link bất cứ trang nào */
  }

  return (
    <footer className="footer">
      <div className="footer-content">
        <div className="footer-section">
          <h3>About Us</h3>
          <ul>
            <li>
              <a href="/about">Our Story</a>
            </li>
            <li>
              <a href="/team">Team</a>
            </li>
            <li>
              <a href="/careers">Careers</a>
            </li>
            <li>
              <a href="mailto:ndtnetdautruong@gmail.com">Contact: ndtnetdautruong@gmail.com</a>

            </li>
          </ul>
        </div>

        <div className="footer-section">
          <h3>Services</h3>
          <ul>
            <li>
              <a href="/services">Our Services</a>
            </li>
            <li>
              <a href="/pricing">Pricing</a>
            </li>
            <li>
              <a href="/support">Support</a>
            </li>
            <li>
              <a href="/faq">FAQ</a>
            </li>
          </ul>
        </div>

        <div className="footer-section">
          <h3>Legal</h3>
          <ul>
            <li>
              <a href="/privacy">Privacy Policy</a>
            </li>
            <li>
              <a href="/terms">Terms of Service</a>
            </li>
            <li>
              <a href="/cookies">Cookie Policy</a>
            </li>
            <li>
              <a href="/disclaimer">Disclaimer</a>
            </li>
          </ul>
        </div>
      </div>

      <div className="footer-bottom">
        <p>&copy; {currentYear} Group 4 NT208.P22.ANTT. All rights reserved.</p>
      </div>
    </footer>
  );
};

export default footer;

```

### frontend\src\components\web_page\navbar.jsx
```jsx
import { useState, useEffect } from "react";
import "../../style/web_page/navbar.css";
import { Link } from "react-router-dom";
const Navbar = () => {
  const [isScrolled, setIsScrolled] = useState(false);

  useEffect(() => {
    const handleScroll = () => {
      if (window.scrollY > 50) {
        setIsScrolled(true);
      } else {
        setIsScrolled(false);
      }
    };

    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, []);

  return (
    <nav className={`navbar ${isScrolled ? "scrolled" : ""}`}>
      <div className="logo-text">AI ChatBot</div>
      <div className="nav-links">
        <Link to="/auth/login" className="api-link">
          Login↗
        </Link>
      </div>
    </nav>
  );
};
export default Navbar;

```

### frontend\src\components\web_page\tittle.jsx
```jsx
//Tieu de
import "../../style/web_page/tittle.css";
function title() {
  return (
    
    <section className="Tittle-section">
      <h1 className="MainTittle">AI ChatBot</h1>
      <h2 className="debcribe">Trò chuyện cùng các Idol</h2>
    </section>
  );
}
export default title;

```

### frontend\src\context\CuThamKhao\SelectedAvatarContext.js
```js
/* Import các hàm cần thiết từ react */
import React, { createContext, useContext, useState } from "react";
/* Tạo context để chia sẻ dữ liệu "SelectedAvatar" (avatar của Celeb) */
const SelectedAvatarContext = createContext();
/* Provider bọc quanh app để cung cấp selected Avatar cho mọi component thành phần */
export const SelectedAvatarProvider = ({ children }) => {
  /* Tạo state để lưu avatar được chọn */
  const [selectedAvatar, setSelectedAvatar] = useState(null);
  return (
    /* Truyền state và hàm cập nhật xuống các components thành phần qua context */
    <SelectedAvatarContext.Provider
      value={{ selectedAvatar, setSelectedAvatar }}
    >
      {children}
    </SelectedAvatarContext.Provider>
  );
};

/* Custom hook để lấy selectedAvatar và setSelectedAvatar dễ dàng */
export const useSelectedAvatar = () => useContext(SelectedAvatarContext);

```

### frontend\src\context\CuThamKhao\SelectedCelebContext.js
```js
import React, { createContext, useContext, useState } from "react";

/* Tạo context để chia sẻ dữ liệu SelectedCeleb (celeb được chọn) */
const SelectedCelebContext = createContext();
/* Tạo provider để cung cấp selectedCeleb và setSelectedCeleb trong các components thành phần */
export const SelectedCelebProvider = ({ children }) => {
  /* tạo state để lưu celeb được chọn */
  const [selectedCeleb, setSelectedCeleb] = useState(null);
  return (
    /* Truyền state xuống các components thành phần qua context */
    <SelectedCelebContext.Provider value={{ selectedCeleb, setSelectedCeleb }}>
      {children}
    </SelectedCelebContext.Provider>
  );
};
/* Custom hook để lấy state dễ dàng hơn */
export const useSelectedCeleb = () => useContext(SelectedCelebContext);

```

### frontend\src\context\CuThamKhao\UsernameContext.js
```js
import React, { createContext, useContext, useState } from "react";
/* Tạo context để chia sẻ dữ liệu username */
const usernameContext = createContext();
/* Tạo provider để cung cấp username cho mọi components thành phần */
export const UsernameProvider = ({ children }) => {
  /* Tạo state để lưu username người dùng */
  //const loggedUser = authUser.Username;
  const [username, setUsername] =
    useState(""); /* Thay username mặc định bằng user name người dùng ở đây */
  return (
    /* Truyền xuống các components thành phần qua context */
    <usernameContext.Provider value={{ username, setUsername }}>
      {children}
    </usernameContext.Provider>
  );
};
/* Custom hook để lấy được thông tin ở các components dễ hơn */
export const useUsername = () => {
  return useContext(usernameContext);
};

```

### frontend\src\feature\login\login.js
```js
// const sign_in_btn = document.querySelector("#sign-in-btn");
// const sign_up_btn = document.querySelector("#sign-up-btn");
// const container = document.querySelector(".container");

// sign_up_btn.addEventListener("click", () => {
//   container.classList.add("sign-up-mode");
// });

// sign_in_btn.addEventListener("click", () => {
//   container.classList.remove("sign-up-mode");
// });

export function initLoginHandlers() {
  const sign_in_btn = document.querySelector("#sign-in-btn");
  const sign_up_btn = document.querySelector("#sign-up-btn");
  const container = document.querySelector(".container");

  if (sign_up_btn && container) {
    sign_up_btn.addEventListener("click", () => {
      container.classList.add("sign-up-mode");
    });
  } else {
    console.warn("Không tìm thấy nút đăng ký hoặc container.");
  }

  if (sign_in_btn && container) {
    sign_in_btn.addEventListener("click", () => {
      container.classList.remove("sign-up-mode");
    });
  } else {
    console.warn("Không tìm thấy nút đăng nhập hoặc container.");
  }
}

```

### frontend\src\page\chat\chat.jsx
```jsx
import React, { useEffect, useState } from "react";
import "../../style/chat/chat.css";
import "../../style/chat/chatbox.css";
import "../../style/chat/sidebar.css";

import Sidebar from "../../components/chat/sidebar";
import Chatbox from "../../components/chat/chatbox";
import { useAuthStore } from "../../store/useAuthStore";
import { useChatStore } from "../../store/useChatStore";
import { toast } from 'react-hot-toast';
import { useLocation, useNavigate } from 'react-router-dom';
document.title = "AI Chatbot";

const Chat = () => {
  const { connectSocket, socket, authUser } = useAuthStore();      // kết nối socket
  const { celebs, selectedCeleb, setSelectedCeleb, getCelebs } = useChatStore();
  const [isSocketReady, setIsSocketReady] = useState(false);
  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);
  const location = useLocation();
  const navigate = useNavigate();
  const checkAuth = useAuthStore(state => state.checkAuth);

  // Xử lý kết quả thanh toán
  useEffect(() => {
    const params = new URLSearchParams(location.search);
    const payment = params.get('payment');
    if (payment === 'success') {
      toast.success('Nâng cấp lên Premium thành công!');
      // Gọi lại checkAuth để cập nhật authUser.tier = 'premium'
      checkAuth();
    } else if (payment === 'failed') {
      toast.error('Thanh toán thất bại. Vui lòng thử lại.');
    } else if (payment === 'invalid' || payment === 'error') {
      toast.error('Thanh toán gặp lỗi. Vui lòng liên hệ hỗ trợ.');
    } else {
      return;
    }
    // Xóa param thanh toán khỏi URL để tránh xử lý lại khi user refresh
    params.delete('payment');
    navigate({ pathname: location.pathname, search: params.toString() }, { replace: true });
  }, [location.search, navigate, checkAuth]);

  useEffect(() => {
    getCelebs();                                                   // lấy danh sách celeb
  }, [getCelebs]);
  useEffect(() => {
    // Sau khi component mount
    if (!authUser) {
      useAuthStore.getState().checkAuth();
    }
  }, []);
  useEffect(() => {
    if (authUser && (!socket || !socket.connected)) {
      connectSocket();                                             // khởi tạo socket khi có authUser
    }
  }, [authUser, connectSocket, socket]);

  useEffect(() => {
    if (!socket) return;
    socket.on("connect", () => setIsSocketReady(true));
    socket.on("disconnect", () => setIsSocketReady(false));
    return () => {
      socket.off("connect");
      socket.off("disconnect");
    };
  }, [socket]);


  useEffect(() => {
    if (socket && authUser) {
      // Join room của user khi vào trang chat
      const userRoom = `user_${authUser._id}`;
      socket.emit('joinRoom', userRoom);
    }

    return () => {
      // Rời room khi component unmount
      if (socket && authUser) {
        socket.emit('leaveRoom', `user_${authUser._id}`);
      }
    };
  }, [socket, authUser]);

  const handleSelect = (celeb) => setSelectedCeleb(celeb);          // chọn celeb

  const toggleSidebar = () => {
    setIsSidebarCollapsed(!isSidebarCollapsed);
  };

  return (
    <div className="chat-container">
      <Sidebar
        celebs={celebs}
        selectedCeleb={selectedCeleb}
        handleSelect={handleSelect}
        isCollapsed={isSidebarCollapsed} // Truyền trạng thái
        toggleSidebar={toggleSidebar}   // Truyền hàm toggle
      />
      <Chatbox isSocketReady={isSocketReady} />
    </div>
  );
};

export default Chat;
```

### frontend\src\page\chat\filechatcuthamkhao.jsx
```jsx
import Sidebar from "../components/Chat/Sidebar";
import Chatbox from "../components/Chat/Chatbox";
import { UsernameProvider } from "../contexts/UsernameContext";
import "../styles/chatBox/App.css";
import { SelectedCelebProvider } from "../contexts/SelectedCelebContext";
import { SelectedAvatarProvider } from "../contexts/SelectedAvatarContext";
function App() {
  return (
    <UsernameProvider>
      <SelectedCelebProvider>
        <SelectedAvatarProvider>
          <div className="app">
            <Sidebar />
            <Chatbox />
          </div>
        </SelectedAvatarProvider>
      </SelectedCelebProvider>
    </UsernameProvider>
  );
}

export default App;

```

### frontend\src\page\interview\interview.jsx
```jsx
import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import '../../style/interview/interview.css';
import AI_img from "../../assets/interview/AI_fine_tune.png";
import SS_AI_img from "../../assets/interview/SS_model_Ollama.png";
import page_speed_rating_mobile from "../../assets/interview/page_speed_rating_mobile.jpg";
import page_speed_rating_pc from "../../assets/interview/page_speed_rating_pc.jpg";
import guide from "../../assets/interview/guide.png";
const sidebarItems = [
  {
    section: 'Giới thiệu chung', 
    items: [
      'Tổng quan trang web',
      'Gói đăng ký',
      'Model sử dụng'
    ]
  }
];

const Interview = () => {
  const [openSections, setOpenSections] = useState([]);
  const [selectedItem, setSelectedItem] = useState('Your First API Call');
  const [isSidebarOpen, setIsSidebarOpen] = useState(false);
  const handleSectionClick = (section) => {
    setOpenSections(prev => prev.includes(section) ? prev.filter(s => s !== section) : [...prev, section]);
  };

  const renderContent = (key) => {
    switch (key) {
      case 'Tổng quan trang web':
        return (
          <>
            <h2>Tổng quan trang web</h2>
            <h3>Công nghệ:</h3>
            <p>
               Phía front-end: Sử dụng <b>Reactjs + Vite</b> tăng khả năng tối ưu trang web, thiết kế phù hợp với xu hướng hiện tại, thân thiện và dễ tiếp cận, Back-end sử dụng  <b>Nodejs, MongoDB </b>để theo dõi account, data, gói đăng kí... của quý khách hàng.Đây là trang web làm về  <strong>AI chat bot làm về nghệ sĩ Việt Nam đầu tiên tại Việt Nam</strong> do nhóm 4 phát triển và sẽ mở <strong>Open Source</strong>.
            </p>
            <h3>Thông số:</h3>
            <p>
              Để tối ưu hóa trải nghiệm người dùng, chúng tôi đã thiết kế trang chủ của trang web sao cho đơn giản, dễ dàng sử dụng với hiệu suất ổn định trên cả máy tính lẫn di động. Do đó, chỉ số <strong>hiệu suất</strong> và <strong>hỗ trợ tiếp cận</strong> được ưu tiên trong quá trình thiết kế trang chủ.

            </p>
          <div className='About_img'>
               <img src={page_speed_rating_mobile} alt="Detail Rating for mobile"  className= "img_off_page"/>
                <p className='text_script_img'>Hình ảnh đánh giá trang chủ bằng PageSpeed Insights (mobile) </p>
          </div>
          <div className='About_img'>
               <img src={page_speed_rating_pc} alt="Detail Rating for pc"  className= "img_off_page"/>
                <p className='text_script_img'>Hình ảnh đánh giá trang chủ bằng PageSpeed Insights (máy tính) </p>
          </div>
          <h3>Một vài thao tác cơ bản trên web:</h3>
          <div className='About_img'>
               <img src={guide} alt="Detail Rating for pc"  className= "img_off_page"/>
                <p className='text_script_img'>Hướng dẫn một vài thao tác trên web</p>
          </div>
          
          </>
        );
      case 'Gói đăng ký':
        return (
          <>
            <h2>Đến với AI ChatBot bạn nhận được gì?</h2>
            <p>
              Dưới đây là những quyền lợi mà chúng tôi đưa ra khi bạn đăng kí dịch vụ bên tôi: 
            </p>
             <table className="table_register_AI">
    <thead>
      <tr>
        <th>Gói</th>
        <th>Free</th>
        <th>Premium</th>
      </tr>
    </thead>
    <tbody>
     
      <tr>
        <td>Giới hạn lượt hỏi</td>
        <td>10 câu/ngày</td>
        <td>Không giới hạn</td>
      </tr>

 
      <tr>
        <td>Text-to-Speech</td>
        <td>
         ✗
        </td>
        <td>
          ✓
        </td>
      </tr>
      
      <tr>
        <td>Trải nghiệm phiên bản mới</td>
        <td>✗</td>
        <td>✓</td>
      </tr>

      <tr>
        <td>Có thể chọn việc cho model học phong cách nói chuyện của chính mình (Đang phát triển) </td>
        <td>✗</td>
        <td>✓</td>
      </tr>

       <tr>
        <td>Giá</td>
        <td>0 VND</td>
        <td> <del>500.000 VND</del>  <b>250.000 VND</b> <b className= "discount-value">(-50%)</b></td>
      </tr>

    </tbody>
  </table>
  <p>Hãy đăng kí ngay hôm nay để nhận được ưu đãi giá tốt! </p>
          </>
        );
        case 'Model sử dụng':
        return (
          <>
            <h2>Model AI của trang Web</h2>
            <p>
              Để có thể tạo ra 1 chat bot AI người Việt, chúng tôi đã sử dụng model <strong>Ollama 3.2 3B-Instruction</strong> sau đó fine-tune dựa trên lượng data đã được tìm kiếm thủ công, lọc data để mang lại một <strong>model biết nói Tiếng Việt</strong>, biết sáng tạo nói theo phong cách của người nổi tiếng 100%.
            </p>

          <h3 className='Title_of_page'>Tại sao chúng tôi lại sử dụng Ollama 3.2 3B - Instruction?</h3>
          <div className='About_img'>
               <img src={SS_AI_img} alt="Detail fine-tune AI"  className= "img_off_page"/>
                <p className='text_script_img'>Hình ảnh benchmark giữa các model </p>
          </div>
          <p>Bởi vì <strong>OLlama 3.2 3B-Instruction </strong> có hỗ trợ đa ngôn ngữ đặc biệt là Tiếng Việt, đó là 1 điều kiện tuyệt vời để tránh việc phải train lại model thêm nhiều ngữ cảnh ứng xử của người Việt. Cùng với yếu tố cấu hình 3B tức 3 tỷ tham số sẽ phù hợp để chạy với cấu hình yếu và sẽ là vừa đủ để model không quá "ngơ".</p>
          
          <h3 className='Title_of_page'>Vậy chúng tôi đã fine-tune model như thế nào?</h3>
          <p>Để fine-tune được một model sẽ cần rất nhiều yếu tố và cần biết <b>tối ưu phần cứng </b> để chạy fine-tune model. Ngoài ra chúng ta cần phải có được nguồn data dồi dào của các nhân vật được nhắc đến, nguồn chủ yếu để có thể khai thác thông tin đến từ các talkshow, bài báo, tạp chí... của nhân vật đó, chúng ta sẽ lấy những data đặc trưng nhất của nhân vật và chọn lọc. Ngoài ra chúng ta sẽ sử dụng những data ảo được tạo từ những data thật để có thể làm sinh động hơn data để fine-tune. Ngoài ra để model có thể đúng như mong đợi là một "Chat Bot" thì ta cần phải format sang dạng có persona riêng của từng nhân vật. Xây dựng hình tượng nhân vật không chỉ qua data mà thêm vào đó sẽ kà các tính cách, những câu chuyện của nhân vật để model có thể nhận diện và hiểu rõ hơn về hình tượng nhân vật mà nó cần mô phỏng.</p>
          <div className='About_img'>
               <img src={AI_img} alt="Detail fine-tune AI"  className= "img_off_page"/>
                <p className='text_script_img'>Hình ảnh về thông số mô tả quá trình fine-tune AI</p>
          </div>

          <p></p>
              
          </>
        );
        
      default:
        return <h2><b>Welcome to AI ChatBot</b></h2>;
    }
  };

  return (
    <div className="containerI">
      <header className="headerI">
        <button
          className="toggle-btn"
          onClick={() => setIsSidebarOpen(prev => !prev)}
        >
          ☰
        </button>
        <div className="logoI">AI ChatBot</div>
        <Link to="/" className="home-btn">Home</Link>
      </header>

      <div className="bodyI">
       
           <aside className={`navI ${isSidebarOpen ? 'open' : ''}`}>
 
          {sidebarItems.map((group, idx) => (
            <div key={idx} className="menu-groupI">
              <div
                className={`menu-headerI ${openSections.includes(group.section) ? 'activeI' : ''}`}
                onClick={() => handleSectionClick(group.section)}
              >
                {group.section}
              </div>
              {group.items.length > 0 && openSections.includes(group.section) && (
                <ul className="menu-listI">
                  {group.items.map((item, index) => (
                    <li
                      key={index}
                      className={`menu-itemI ${selectedItem === item ? 'activeI' : ''}`}
                      onClick={() => setSelectedItem(item)}
                    >
                      {item}
                    </li>
                  ))}
                </ul>
              )}
            </div>
          ))}
        </aside>

        <main className="contentI">
          {renderContent(selectedItem)}
        </main>
      </div>
    </div>
  );
};

export default Interview;

```

### frontend\src\page\login\filelogincuthamkhao.jsx
```jsx
import React from "react";
import { useNavigate } from "react-router-dom";
import InputField from "../components/login/InputField";
import SocialLogin from "../components/login/SocialLogin";
import "../styles/login/index.css";
import { useAuthStore } from "../store/useAuthStore";

const LoginApp = ({ onLoginSuccess }) => {
  const navigate = useNavigate();
  const [formData, setFormData] = React.useState({
    email: "",
    password: "",
  });

  const { LogIn } = useAuthStore();

  const handleLogin = async (e) => {
    e.preventDefault();

    // Giả sử bạn có kiểm tra hợp lệ dữ liệu nhập vào (email và password) ở đây.
    // Nếu hợp lệ:
    const user = await LogIn(formData);
    console.log(user);
    if (user) {
      onLoginSuccess();
      navigate("/chat"); // chuyển hướng sang trang Chat
    }
  };

  return (
    <div className="container">
      <div className="img-background"></div>

      <div className="right-container">
        <div className="login-bar">
          <h2 className="form-title">Login with </h2>
          <SocialLogin />
          <p className="separator">
            <span>or</span>
          </p>

          <form onSubmit={handleLogin} action="#" className="login-form">
            <InputField
              type="email"
              placeholder="Email address"
              icon="mail"
              //hỗ trợ tính năng kiểm tra ở thời gian thực
              value={formData.email}
              onChange={(e) =>
                setFormData({ ...formData, email: e.target.value })
              }
            />
            <InputField
              type="password"
              placeholder="Password"
              icon="key"
              //hỗ trợ tính năng kiểm tra ở thời gian thực
              value={formData.password}
              onChange={(e) =>
                setFormData({ ...formData, password: e.target.value })
              }
            />
            <a href="#" className="forget-pass-link">
              Forgot password?
            </a>
            <button className="login-button">Log In</button>
          </form>

          <p className="signup-text">
            Don't have an account? <a href="#">Sign up now</a>
          </p>
        </div>
      </div>
    </div>
  );
};

export default LoginApp;

```

### frontend\src\page\login\ForgotPasswordPage.jsx
```jsx
import React, { useState } from 'react';
import axios from 'axios';
import '../../style/passwd/ForgotPasswordPage.css'; // Import CSS styles

export default function ForgotPasswordPage() {
  const [email, setEmail] = useState('');
  const [message, setMessage] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      await axios.post('https://celebritychatbot.up.railway.app/api/auth/forgot-password', { email });
      setMessage('Vui lòng kiểm tra email để nhận link đặt lại mật khẩu.');
    } catch (err) {
      setMessage('Email không tồn tại hoặc có lỗi xảy ra.');
    }
  };

  return (
    <div className="forgot-container">
      <h2 className="forgot-title">Quên mật khẩu?</h2>
      <form className="forgot-form" onSubmit={handleSubmit}>
        <input
          className="forgot-input"
          type="email"
          placeholder="Nhập email của bạn"
          value={email}
          onChange={e => setEmail(e.target.value)}
          required
        />
        <button className="forgot-btn" type="submit">Tiếp tục</button>
      </form>
      {message && <p className="forgot-message">{message}</p>}
    </div>
  );
}
```

### frontend\src\page\login\login.jsx
```jsx
// src/pages/Login.jsx
import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import { initLoginHandlers } from "../../feature/login/login.js";
import GoogleIcon from "../../assets/login/google.svg";
import "../../style/login/login.css";
import Input_Field from "../../components/login/Input_Fields.jsx";
import { useAuthStore } from "../../store/useAuthStore.js";

const Login = () => {
  const { LogIn, SignUp } = useAuthStore();
  const navigate = useNavigate();

  // === State cho Sign-in ===
  const [signInData, setSignInData] = useState({ email: "", password: "" });
  const [signInError, setSignInError] = useState("");
  const [signInLoading, setSignInLoading] = useState(false);

  // === State cho Sign-up ===
  const [signUpData, setSignUpData] = useState({
    username: "",
    email: "",
    password: "",
    confirmPassword: ""
  });
  const [signUpError, setSignUpError] = useState("");
  const [signUpLoading, setSignUpLoading] = useState(false);

  useEffect(() => {
    document.title = "Login";
  }, []);

  useEffect(() => {
    initLoginHandlers();

    // Sau khi DOM được render, đánh dấu event listeners để reset form
    // Khi click “Sign up” (đổi pane), xóa dữ liệu sign-in
    const signUpBtn = document.getElementById("sign-up-btn");
    const signInBtn = document.getElementById("sign-in-btn");

    const clearSignInForm = () => {
      setSignInData({ email: "", password: "" });
      setSignInError("");
    };
    const clearSignUpForm = () => {
      setSignUpData({
        username: "",
        email: "",
        password: "",
        confirmPassword: ""
      });
      setSignUpError("");
    };

    if (signUpBtn) signUpBtn.addEventListener("click", clearSignInForm);
    if (signInBtn) signInBtn.addEventListener("click", clearSignUpForm);

    // Cleanup khi component unmount hoặc re-render
    return () => {
      if (signUpBtn) signUpBtn.removeEventListener("click", clearSignInForm);
      if (signInBtn) signInBtn.removeEventListener("click", clearSignUpForm);
    };
  }, []);

  // --- Hàm thay đổi input cho Sign-in ---
  const handleSignInChange = (e) => {
    const { name, value } = e.target;
    setSignInData((prev) => ({ ...prev, [name]: value }));
  };

  // --- Submit Sign-in ---
  const handleSubmit = async (e) => {
    e.preventDefault();
    setSignInError("");

    const { email, password } = signInData;
    if (!email || !password) {
      setSignInError("Vui lòng nhập đầy đủ email và mật khẩu");
      return;
    }

    setSignInLoading(true);
    try {
      const user = await LogIn({ email, password });
      setSignInLoading(false);
      if (user) {
        navigate("/chat");
      } else {
        setSignInError("Email hoặc mật khẩu không đúng");
      }
    } catch (err) {
      setSignInLoading(false);
      setSignInError("Có lỗi xảy ra, vui lòng thử lại");
      console.error(err);
    }
  };

  // --- Hàm thay đổi input cho Sign-up ---
  const handleSignUpChange = (e) => {
    const { name, value } = e.target;
    setSignUpData((prev) => ({ ...prev, [name]: value }));

    // Kiểm tra ngay khi nhập confirmPassword hoặc password
    if (name === "confirmPassword") {
      if (value && value !== signUpData.password) {
        setSignUpError("Mật khẩu xác nhận không khớp");
        return;
      } else {
        setSignUpError("");
      }
    }
    if (name === "password") {
      if (signUpData.confirmPassword && value !== signUpData.confirmPassword) {
        setSignUpError("Mật khẩu xác nhận không khớp");
        return;
      } else {
        setSignUpError("");
      }
    }
    setSignUpError("");
  };

  // --- Submit Sign-up ---
  const handleSignUp = async (e) => {
    e.preventDefault();
    setSignUpError("");

    const { username, email, password, confirmPassword } = signUpData;
    
    if (!username || !email || !password || !confirmPassword) {
      setSignUpError("Vui lòng nhập đầy đủ thông tin");
      return;
    }
    if (password !== confirmPassword) {
      setSignUpError("Mật khẩu xác nhận không khớp");
      return;
    }

    setSignUpLoading(true);
    try {
      const user = await SignUp({ username, email, password });
      setSignUpLoading(false);
      if (user) {
        navigate("/auth/login");
      } else {
        setSignUpError("Đăng ký thất bại, vui lòng thử lại");
      }
    } catch (err) {
      setSignUpLoading(false);
      setSignUpError("Có lỗi xảy ra, vui lòng thử lại");
      console.error(err);
    }
  };

  return (
    <>
      <div className="container">
        <div className="forms-container">
          <div className="signin-signup">
            {/* ===== Form Sign-in ===== */}
            <form
              action="#"
              className="sign-in-form"
              onSubmit={handleSubmit}
            >
              <h2 className="title">Sign in</h2>

              <Input_Field
                name="email"
                icon="mail"
                type="email"
                placeholder="Email"
                value={signInData.email}
                onChange={handleSignInChange}
              />

              <Input_Field
                name="password"
                icon="key"
                type="password"
                placeholder="Password"
                value={signInData.password}
                onChange={handleSignInChange}
              />

              {signInError && (
                <div className="form-error" style={{ color: "red", marginTop: "4px" }}>
                  {signInError}
                </div>
              )}

              <input
                type="submit"
                value={signInLoading ? "Đang xử lý..." : "Login"}
                className="btn solid"
                disabled={signInLoading}
              />

              <a href="/forgot-password">Quên mật khẩu?</a>
              <p className="social-text">
                Or sign in with social platforms
              </p>
              <div className="social-media">
                <a
                  href="https://celebritychatbot.up.railway.app/api/auth/google"
                  className="social-icon"
                >
                  <img
                    src={GoogleIcon}
                    alt="GoogleIcon"
                    className="icon-google"
                  />
                </a>
              
              </div>
            </form>

            {/* ===== Form Sign-up ===== */}
            <form className="sign-up-form" onSubmit={handleSignUp}>
              <h2 className="title">Sign up</h2>

              <Input_Field
                name="username"
                icon="account_circle"
                type="text"
                placeholder="Username"
                value={signUpData.username}
                onChange={handleSignUpChange}
              />

              <Input_Field
                name="email"
                icon="mail"
                type="email"
                placeholder="Email"
                value={signUpData.email}
                onChange={handleSignUpChange}
              />

              <Input_Field
                name="password"
                icon="key"
                type="password"
                placeholder="Password"
                value={signUpData.password}
                onChange={handleSignUpChange}
              />

              <Input_Field
                name="confirmPassword"
                icon="verified_user"
                type="password"
                placeholder="Confirm Password"
                value={signUpData.confirmPassword}
                onChange={handleSignUpChange}
              />

              {signUpError && (
                <div className="form-error" style={{ color: "red", marginTop: "4px" }}>
                  {signUpError}
                </div>
              )}

              <input
                type="submit"
                className="btn"
                value={signUpLoading ? "Đang xử lý..." : "Sign up"}
                disabled={signUpLoading}
              />
            </form>
          </div>
        </div>

        <div className="panels-container">
          <div className="panel left-panel">
            <div className="content">
              <h3>New here ?</h3>
              <p>Create account to chat with me!</p>
              <button className="btn transparent" id="sign-up-btn">
                Sign up
              </button>
            </div>
          </div>
          <div className="panel right-panel">
            <div className="content">
              <h3>One of us ?</h3>
              <p>Welcome back!</p>
              <button className="btn transparent" id="sign-in-btn">
                Sign in
              </button>
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

export default Login;

```

### frontend\src\page\login\OAuthSuccess.jsx
```jsx
import { useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuthStore } from '../../store/useAuthStore';

const OAuthSuccess = () => {
  const navigate = useNavigate();
  const checkAuth = useAuthStore(state => state.checkAuth);

  useEffect(() => {
    const verifyAuth = async () => {
      try {
        await checkAuth(); // Xác minh cookie với backend
        navigate('/chat'); // Điều hướng khi thành công
      } catch (err) {
        navigate('/auth/login?error=oauth_failed');
      }
    };

    verifyAuth();
  }, [checkAuth, navigate]);

  return (
    <div className="oauth-loading">
      <p>Đang hoàn tất đăng nhập...</p>
      {/* Hiển thị spinner */}
    </div>
  );
};

export default OAuthSuccess;

```

### frontend\src\page\login\ResetPasswordPage.jsx
```jsx
import React, { useState } from 'react';
import { useParams } from 'react-router-dom';
import axios from 'axios';
import '../../style/passwd/ResetPasswordPage.css'; // Import CSS styles

export default function ResetPasswordPage() {
  const { token } = useParams();
  const [newPassword, setNewPassword] = useState('');
  const [message, setMessage] = useState('');
  const [success, setSuccess] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      await axios.post(`https://celebritychatbot.up.railway.app/api/auth/reset-password/${token}`, { newPassword });
      setMessage('Đặt lại mật khẩu thành công! Bạn có thể đăng nhập lại.');
      setSuccess(true);
    } catch (err) {
      setMessage('Token không hợp lệ hoặc có lỗi xảy ra.');
      setSuccess(false);
    }
  };

  return (
    <div className="reset-container">
      <h2 className="reset-title">Đặt lại mật khẩu</h2>
      <form className="reset-form" onSubmit={handleSubmit}>
        <input
          className="reset-input"
          type="password"
          placeholder="Nhập mật khẩu mới"
          value={newPassword}
          onChange={e => setNewPassword(e.target.value)}
          required
        />
        <button className="reset-btn" type="submit">Đặt lại mật khẩu</button>
      </form>
      {message && <p className={success ? 'reset-message success' : 'reset-message error'}>{message}</p>}
    </div>
  );
}
```

### frontend\src\page\payment\payment.jsx
```jsx
import React from 'react';
import '../../style/payment/payment.css';
import { axiosInstance } from '../../lib/axios.js';
import toast from "react-hot-toast";
import { useNavigate } from 'react-router-dom';



function Payment() {
  const navigate = useNavigate();
  const handlePayment = async () => {
    try {
      const res = await axiosInstance.post("/api/vnpay/create-payment");

      if (res?.data) {
        console.log(res.data.paymentUrl);
        window.location.href = res.data.paymentUrl;
      } else {
        toast.error("Invalid payment URL received");
      }
    
    } catch (err) {
      toast.error("Error in payment");
      console.log("Error in payment: ", err);
      navigate("/chat");
    }
  };

  return (
    <div className="payment-container">
      <div className="payment-card">
        <h1 className="payment-title">Celebrity Pro</h1>
        <p className="payment-subtitle">
          Trò chuyện không giới hạn cùng người nổi tiếng yêu thích của bạn
        </p>

        <div className="payment-price">
          <span className="old-price">500.000 ₫</span>
          <span className="new-price">250.000 ₫/tháng</span>
        </div>

        <button className="payment-button" onClick={handlePayment}>Đăng ký Celebrity Pro</button>

        <ul className="feature-list">
          <li>
            <strong>Nhắn tin không giới hạn</strong>
            <p>Nhắn tin cùng người nổi tiếng yêu thích của bạn mà không bị giới hạn số lượng tin nhắn</p>
          </li>
          <li>
            <strong>Text to speech</strong>
            <p>Không chỉ dừng lại ở nhắn tin, bạn có thể nghe những phản hồi từ người nổi tiếng</p>
          </li>
          <li>
            <strong>Mua một lần</strong>
            <p>Chỉ cần mua gói một lần, bạn có thể tận hưởng toàn bộ tính năng vĩnh viễn</p>
          </li>
        </ul>
      </div>
    </div>
  );
}

export default Payment;
```

### frontend\src\page\web_page\Home.jsx
```jsx
import Navbar from "../../components/web_page/navbar.jsx";
import  { lazy, Suspense, useEffect } from 'react';
import "../../style/web_page/Home_module.css";

const Tittle = lazy(() => import('../../components/web_page/tittle.jsx'));
const ContainerButton = lazy(() => import('../../components/web_page/container-button.jsx'));
const Footer = lazy(() => import('../../components/web_page/footer.jsx'));

function Home() {
  useEffect(() => {
    document.title = 'AI ChatBot-Home';
  }, []);
  return (
    <>
      <Navbar />
      <Tittle />
      <Suspense>
        <ContainerButton />
      </Suspense>
      <Suspense>
        <br />
        <Footer />
      </Suspense>
    </>
  );
}

export default Home;

```

### frontend\src\store\useAuthStore.js
```js
//lưu trữ thông tin xác thực và đăng kí, đăng nhập của người dùng 
import { create } from "zustand";
import { axiosInstance } from "../lib/axios.js";
import { io } from "socket.io-client";
import { persist } from "zustand/middleware";
import toast from "react-hot-toast";
const BASE_URL = "https://celebritychatbot.id.vn"; //"https://celebritychatbot.up.railway.app" /*"http://localhost:3001"*/;
//persist để lưu trữ thông tin xác thực và đăng kí, đăng nhập của người dùng vào localStorage
export const useAuthStore = create(persist((set, get) => ({
//useAuthStore là một hàm chứa các biến kiểm tra trạng thái người dùng và kiểm tra thông tin xác thực
  authUser: null,
  isLoggingIn: false,
  isSigningUp: false,
  isCheckingAuth: true,
  socket: null,
  isSocketConnecting: false, // Flag để tránh gọi connectSocket nhiều lần

  // Hàm kiểm tra xác thực, nếu thành công sẽ gọi connectSocket
  checkAuth: async () => {
  try {
    const res = await axiosInstance.get("/api/auth/check", {
      withCredentials: true // Đảm bảo gửi cookie
    });
    
    // Cập nhật state người dùng
    set({ authUser: res.data });
    return res.data;
  } catch (error) {
    set({ authUser: null });
    throw error;
  }
},

  // Hàm đăng ký, sau đó kết nối socket
  SignUp: async (data) => {
    set({ isSigningUp: true });
    try {
      const res = await axiosInstance.post("/api/auth/signup", data);
            //thêm thông báo tạo tài khoản thành công
      //set({ authUser: res.data.user });
      //get().connectSocket();

      toast.success("Account created successfully, please log in to continue.");
      return res.data;
    } catch (error) {
       //thêm thông báo lỗi (lỗi cụ thể nằm ở các cách thức kiểm tra mật khẩu ở backend/src/controllers/auth.controller.js)
      toast.error(error.response.data.message);
      console.log("Error in SignUp:", error);
    } finally {
      set({ isSigningUp: false });
    }
  },

  // Hàm đăng xuất, đóng kết nối socket và xóa authUser
  LogOut: async () => {
    try {
      await axiosInstance.post("/api/auth/logout");
      set({ authUser: null });
      get().disconnectSocket();
      toast.success("Logged out successfully");
    } catch (error) {
      console.log("Error in LogOut:", error);
    }
  },

  // Hàm đăng nhập, sau đó kết nối socket
  LogIn: async (data) => {
    set({ isLoggingIn: true });
    try {
      const res = await axiosInstance.post("/api/auth/login", data, {
        withCredentials: true, // Đảm bảo gửi cookie xác thực
      });
       //thêm thông báo tạo tài khoản thành công
      set({ authUser: res.data.user });
      get().connectSocket();
      console.log("Logged in successfully!");
      toast.success("Logged in successfully");
      return res.data;
    } catch (error) {
      //thêm thông báo lỗi (lỗi cụ thể nằm ở các cách thức kiểm tra mật khẩu ở backend/src/controllers/auth.controller.js)
      toast.error(error.response.data.message);
      console.log("Error in LogIn:", error);
    } finally {
      set({ isLoggingIn: false });
    }
  },

  // Hàm kết nối socket
  connectSocket: () => {
    const { authUser, socket: currentSocket, isSocketConnecting } = get();
    if (!authUser) return;
    
    // Nếu đang trong quá trình kết nối hoặc đã có socket đang kết nối thì không tạo mới
    if (isSocketConnecting || (currentSocket && currentSocket.connected)) return;
    
    // Nếu có socket tồn tại nhưng chưa kết nối, đóng nó lại
    if (currentSocket) {
      currentSocket.disconnect();
    }
    
    // Đánh dấu bắt đầu kết nối
    set({ isSocketConnecting: true });
    
    // Tạo socket mới
    const newSocket = io(BASE_URL, {
      query: { userId: authUser._id },
      withCredentials: true, // Đảm bảo gửi cookie xác thực
      transports: ["websocket"], // Sử dụng WebSocket
      reconnection: true,
      reconnectionAttempts: 5,
      reconnectionDelay: 3000,
    });
    
    // Không cần gọi newSocket.connect() vì khi khởi tạo với io() nó tự động kết nối,
    // nhưng nếu muốn chắc chắn, có thể gọi newSocket.connect();
    newSocket.connect();

    newSocket.on("connect", () => {
      console.log("Socket connected:", newSocket.id);
      // Lưu socket mới và reset flag kết nối
      set({ socket: newSocket, isSocketConnecting: false });
    });

    newSocket.on("disconnect", () => {
      console.log("Socket disconnected");
      set({ socket: null });
    });

    newSocket.on("connect_error", (err) => {
      console.error("Socket connection error:", err);
      set({ isSocketConnecting: false });
    });
  },

  // Hàm đóng kết nối socket
  disconnectSocket: () => {
    const { socket } = get();
    if (socket) {
      socket.disconnect();
      set({ socket: null });
    }
  },
  
}), {
  name: "auth-storage", // key lưu vào localStorage
  partialize: (state) => ({ authUser: state.authUser }), // chỉ lưu authUser, không lưu socket
}));
```

### frontend\src\store\useChatStore.js
```js
// File: client/src/store/useChatStore.js
import { create } from 'zustand';
import { axiosInstance } from '../lib/axios.js';
import { useAuthStore } from "./useAuthStore.js";

export const useChatStore = create((set, get) => ({
    messages: [],
    celebs: [],
    useSelectedCeleb: null,
    isCelebsLoading: false,

    getCelebs: async () => {
        set({ isCelebsLoading: true });
        try {
            const res = await axiosInstance("/api/chat"); 
            set({ celebs: res.data });
        } catch (error) {
            // Xử lý lỗi
        } finally {
            set({ isCelebsLoading: false });
        }
    },

    getMessages: async (myId) => {
        if (!myId) return;
        try {
            const res = await axiosInstance(`/api/chat/get/${myId}`);
            set({ messages: res.data });
        } catch (error) {
            console.error("Error fetching messages:", error);
        }
    },

    sendMessage: async (messageData) => {
        const { useSelectedCeleb, messages } = get();
        const authUser = useAuthStore.getState().authUser;
        const socket = useAuthStore.getState().socket; // Lấy socket từ useAuthStore
        //tin nhắn tạm(hỗ trợ chat real-life)
        let tempMessage;
        try {
            tempMessage = {
                _id: Date.now().toString(),
                message: messageData.message,
                sender: authUser._id,
                receiver: useSelectedCeleb._id,
                userType: authUser.GoogleId ? 'google_user' : 'user',
                createdAt: new Date().toISOString(),
                isOptimistic: true
            };

            // Optimistic update tin nhắn tạm (real-time)
            set({ messages: [...messages, tempMessage] });
                // Bật trạng thải "đang trả lời"
            socket.emit('ai_typing_start');
           const res= await axiosInstance.post(`/api/chat/send/${useSelectedCeleb._id}`, messageData, {
            withCredentials: true
           });
            set((state) => ({
                messages: state.messages.map(msg =>
                  msg._id === tempMessage._id ? res.data.userMessage : msg
                )
              }));
            
            // Socket sẽ tự động cập nhật tin nhắn AI qua newMessage
            socket.emit('ai_typing_end');
            
        } catch (error) {
            console.error("Error sending message:", error);
            set((state) => ({
                messages: state.messages.filter(msg => msg._id !== tempMessage?._id)
            }));
            const socket = useAuthStore.getState().socket; 
            if (socket) socket.emit('ai_typing_end');
            
        }
    },

    subscribeToMessages: () => {
        const socket = useAuthStore.getState().socket;
        if (!socket) return;
            
        const handleNewMessage = (newMessage) => {
            if (newMessage.userType === 'ai') {
                set((state) => ({
                    messages: [...state.messages, newMessage]
                }));
            }
        };
      
        socket.on('newMessage', handleNewMessage);
        return () => socket.off('newMessage', handleNewMessage);
    },

    unsubscribeFromMessages: () => {
        const socket = useAuthStore.getState().socket;
        if (socket) {
            socket.off("newMessage");
        }
    },

    setSelectedCeleb: (useSelectedCeleb) => set({ useSelectedCeleb }),
}))
```
